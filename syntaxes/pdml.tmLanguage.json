{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Practical Data & Markup Language",
  "patterns": [
    {
      "include": "#xnode"
    },
    {
      "include": "#node"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#escape-str"
    }
  ],
  "repository": {
    "escape-str": {
      "patterns": [
        {
          "match": "\\\\u.{4}",
          "name": "constant.character.escape"
        },
        {
          "match": "\\\\U.{8}",
          "name": "constant.character.escape"
        },
        {
          "match": "\\\\.",
          "name": "constant.character.escape"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#escape-str"
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#escape-str"
            }
          ]
        }
      ]
    },
    "comment": {
      "begin": "\\[-",
      "end": "-\\]",
      "name": "comment",
      "patterns": [
        {
          "include": "#comment"
        }
      ]
    },
    "attribute": {
      "begin": "[a-zA-Z_][a-zA-Z0-9_\\.-]*",
      "beginCaptures": {
        "0": {
          "name": "entity.other.attribute-name"
        }
      },
      "end": "(?=\\s*+[^=\\s])",
      "patterns": [
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value"
            }
          },
          "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
          "patterns": [
            {
              "comment": "The ']' is prohibited because it breaks in `u:set` nodes.",
              "match": "([^0-9-.\\s='\"][^\\s='\")\\]]*)",
              "name": "string.unquoted.html"
            },
            {
              "match": "=",
              "name": "invalid.illegal.unexpected-equals-sign"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#number"
            }
          ]
        }
      ]
    },
    "xnode": {
      "comment": "Extension Nodes",
      "patterns": [
        {
          "begin": "(\\[)(u)(:)",
          "end": "\\]",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag"
            },
            "2": {
              "name": "entity.name.namespace"
            },
            "3": {
              "name": "keyword.operator"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag"
            }
          },
          "patterns": [
            {
              "begin": "(\\G)(set|ins_file)",
              "end": "(?=\\])",
              "beginCaptures": {
                "2": {
                  "name": "support.function"
                }
              },
              "patterns": [
                {
                  "include": "#attribute"
                },
                {
                  "include": "#comment"
                }
              ]
            },
            {
              "match": "(\\G)get ([a-zA-Z_][a-zA-Z0-9_\\.-]*)",
              "captures": {
                "0": {
                  "name": "support.function"
                },
                "2": {
                  "name": "variable.other.constant"
                }
              }
            }
          ]
        },
        {
          "begin": "(\\[)(t)(:)",
          "end": "\\]",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag"
            },
            "2": {
              "name": "entity.name.namespace"
            },
            "3": {
              "name": "keyword.operator"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag"
            }
          },
          "patterns": [
            {
              "begin": "(\\G)string|date",
              "end": "(?=\\])",
              "beginCaptures": {
                "0": {
                  "name": "storage.type"
                }
              },
              "patterns": [
                {
                  "include": "#escape-str"
                }
              ]
            },
            {
              "begin": "(\\G)raw_text",
              "end": "(?=\\])",
              "beginCaptures": {
                "0": {
                  "name": "storage.type"
                }
              },
              "patterns": [
                {
                  "include": "#fenced-code"
                }
              ]
            }
          ]
        },
        {
          "begin": "(\\[)(s)(:)",
          "end": "\\]",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag"
            },
            "2": {
              "name": "entity.name.namespace"
            },
            "3": {
              "name": "keyword.operator"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag"
            }
          },
          "patterns": [
            {
              "comment": "Single-line script",
              "match": "(\\G)(exp|script|def)\\s(.*)(?=\\])",
              "captures": {
                "2": {
                  "name": "meta.preprocessor support.function"
                },
                "3": {
                  "name": "meta.embedded.block.javascript",
                  "patterns": [
                    {
                      "include": "source.js"
                    }
                  ]
                }
              }
            },
            {
              "begin": "(\\G)(exp|script|def)",
              "end": "(?=\\])",
              "beginCaptures": {
                "2": {
                  "name": "meta.preprocessor support.function"
                }
              },
              "patterns": [
                {
                  "comment": "Duplicated 'fenced-code' because `contentName` is different for difference code blocks, i.e. `style` nodes",
                  "begin": "((\"|=|~){3,})",
                  "end": "\\1\\2*",
                  "captures": {
                    "0": {
                      "name": "string.quoted.triple"
                    }
                  },
                  "contentName": "meta.embedded.block.javascript",
                  "patterns": [
                    {
                      "include": "source.js"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "node": {
      "begin": "(\\[)([a-zA-Z_][a-zA-Z0-9_\\.-]*)",
      "end": "\\]",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag"
        },
        "2": {
          "name": "entity.name.tag"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag"
        }
      },
      "patterns": [
        {
          "comment": "Attributes must start on the same line as the node.",
          "begin": "(\\G)\\s*\\(",
          "end": "\\)",
          "captures": {
            "0": {
              "name": "punctuation.definition.annotation punctuation.section.group punctuation.section.parens"
            }
          },
          "patterns": [
            {
              "include": "#attribute"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "include": "#xnode"
        },
        {
          "include": "#node"
        },
        {
          "include": "#fenced-code"
        },
        {
          "include": "#escape-str"
        },
        {
          "include": "#comment"
        }
      ]
    },
    "number": {
      "match": "-?[0-9]*(.[0-9]+)*",
      "name": "constant.numeric"
    },
    "fenced-code": {
      "begin": "((\"|=|~){3,})",
      "end": "\\1\\2*",
      "captures": {
        "0": {
          "name": "string.quoted.triple"
        }
      },
      "contentName": "meta.embedded.block",
      "patterns": [
        {
          "include": "source.js"
        },
        {
          "include": "source.css"
        }
      ]
    }
  },
  "scopeName": "source.pdml"
}